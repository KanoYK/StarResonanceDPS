# .github/workflows/build-windows.yml

name: Build Windows Application

on:
  workflow_dispatch: # 允许手动触发
  push:
    branches:
      - main
      - master

jobs:
  build-on-windows:
    # 使用最新的 Windows Server 镜像
    runs-on: windows-latest

    steps:
      # 1. 检出你的代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 设置 Node.js 环境
      # 建议使用与你 Electron 版本匹配的 Node.js 版本，但通常较新版本也能工作
      # Electron 31 使用 Node.js 20.x，这里用 20 也是一个好选择
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # 3. 安装项目依赖
      - name: Install dependencies
        run: npm install

      # 4. 重建原生模块 (关键步骤!)
      # 针对 Electron 环境重新编译 cap 模块
      - name: Rebuild native dependencies
        run: npm run rebuild

      # 5. 使用 electron-builder 打包应用
      # 它会根据 package.json 的配置生成 .exe 和 .zip
      - name: Build Windows packages
        run: npx electron-builder --win --x64 --publish never
        env:
          # 如果需要代码签名，可以在这里设置环境变量
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      # 6. 上传 .exe 安装包作为构建产物
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: stardps-windows-installer
          path: dist/*.exe
          if-no-files-found: error # 如果没找到文件则报错，帮助调试

      # 7. 上传 .zip 便携版作为构建产物
      - name: Upload Portable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: stardps-windows-portable
          path: dist/*.zip
          if-no-files-found: error # 如果没找到文件则报错
